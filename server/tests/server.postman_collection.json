{
	"info": {
		"_postman_id": "72633d31-bf01-4a63-ab9a-b85013f9bc04",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29414206",
		"_collection_link": "https://group5-web-dev.postman.co/workspace/group5-Workspace~b2851e0c-585d-4d33-8ac1-1dfbdc095fe8/collection/29427216-72633d31-bf01-4a63-ab9a-b85013f9bc04?action=share&source=collection_link&creator=29414206"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "admin credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"adminToken\", responseData.idToken);\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"gussingag@student.gu.se\",\r\n  \"password\": \"gussingag\",\r\n  \"returnSecureToken\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n",
							"protocol": "https",
							"host": [
								"identitytoolkit",
								"googleapis",
								"com"
							],
							"path": [
								"v1",
								"accounts:signInWithPassword"
							],
							"query": [
								{
									"key": "key",
									"value": "AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "company credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"companyToken\", responseData.idToken);\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"guszabma@student.gu.se\",\r\n  \"password\": \"guszabma\",\r\n  \"returnSecureToken\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n",
							"protocol": "https",
							"host": [
								"identitytoolkit",
								"googleapis",
								"com"
							],
							"path": [
								"v1",
								"accounts:signInWithPassword"
							],
							"query": [
								{
									"key": "key",
									"value": "AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "candidate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"candidateToken\", responseData.idToken);\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"gusrochada@student.gu.se\",\r\n  \"password\": \"gusrochada\",\r\n  \"returnSecureToken\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n",
							"protocol": "https",
							"host": [
								"identitytoolkit",
								"googleapis",
								"com"
							],
							"path": [
								"v1",
								"accounts:signInWithPassword"
							],
							"query": [
								{
									"key": "key",
									"value": "AIzaSyCGop4qaMqHxVikHhTgRKxbi4jqPoLh9lo\n"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admins",
			"item": [
				{
					"name": "GET /admins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/admins",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"const adminId = responseJson._id;\r",
									"pm.environment.set(\"adminId\", adminId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Another Admin\", \"email\": \"another.admin@gmail.com\", \"userId\":\"LbCnYAbjQpV6EoExW0FEua9y7Iz1\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"another.admin@gmail.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Another Admin\", \"email\": \"another.admin@gmail.com\", \"userId\":\"LbCnYAbjQpV6EoExW0FEua9y7Iz1\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"another.admin.2@gmail.com\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"another.admin.2@gmail.com\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}?=",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Check for a specific key in the response JSON\", function () {",
									"    pm.response.to.have.jsonBody(\"email\");",
									"});",
									"pm.test(\"Check for a specific key in the response JSON\", function () {",
									"    pm.response.to.have.jsonBody(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admins again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"const adminId = responseJson._id;\r",
									"pm.environment.set(\"adminId\", adminId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Another Admin\", \"email\": \"another.admin@gmail.com\", \"userId\":\"LbCnYAbjQpV6EoExW0FEua9y7Iz1\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "override PUT /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"_method\": \"PUT\",\"name\": \"Another Admin\", \"email\": \"another.admin@gmail.com\", \"userId\":\"LbCnYAbjQpV6EoExW0FEua9y7Iz1\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "override DELETE /admins/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"_method\": \"DELETE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/{{adminId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"{{adminId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "companies",
			"item": [
				{
					"name": "POST /companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response contains the resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"_id\");",
									"    pm.environment.set(\"newResourceId\", responseBody._id);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"const responseJson = pm.response.json();",
									"const companyId = responseJson._id;",
									"pm.environment.set(\"companyId\", companyId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"xLPnFhk1XtdFTWTL8mDBYxbg4y33\",\r\n    \"name\": \"Guszabma Co.\",\r\n    \"email\": \"guszabma@student.gu.se\",\r\n    \"logo\": \"url_to_guszabma_logo\",\r\n    \"locations\": [\r\n        \"Gothenburg\"\r\n    ],\r\n    \"jobs\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check Content-Type header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"const responseJson = pm.response.json();",
									"const companyId = responseJson[0]._id;",
									"pm.environment.set(\"companyId\", companyId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Cute Bees\");",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"bumble.bees@gmail.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Cute Bees\", \"email\": \"bumble.bees@gmail.com\", \"logo\":\"dddNOTNULL\", \"locations\": [] }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.jobs).to.eql([\"6502d74d2350b93179c0c34a\"]);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"jobs\": [\"6502d74d2350b93179c0c34a\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check Content-Type header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /companies (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response contains the resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"_id\");",
									"    pm.environment.set(\"newResourceId\", responseBody._id);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"const responseJson = pm.response.json();",
									"const companyId = responseJson._id;",
									"pm.environment.set(\"companyId\", companyId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"xLPnFhk1XtdFTWTL8mDBYxbg4y33\",\r\n    \"name\": \"Guszabma Co.\",\r\n    \"email\": \"guszabma@student.gu.se\",\r\n    \"logo\": \"url_to_guszabma_logo\",\r\n    \"locations\": [\r\n        \"Gothenburg\"\r\n    ],\r\n    \"jobs\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "override PUT /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"_method\": \"PUT\",\r\n    \"userId\": \"xLPnFhk1XtdFTWTL8mDBYxbg4y33\",\r\n    \"name\": \"Guszabma Co.\",\r\n    \"email\": \"guszabma@student.gu.se\",\r\n    \"logo\": \"url_to_guszabma_logo\",\r\n    \"locations\": [\r\n        \"Gothenburg\"\r\n    ],\r\n    \"jobs\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "override DELETE /companies/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"_method\": \"DELETE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "applications",
			"item": [
				{
					"name": "POST /companies (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response contains the resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"_id\");",
									"    pm.environment.set(\"newResourceId\", responseBody._id);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"const responseJson = pm.response.json();",
									"const companyId = responseJson._id;",
									"pm.environment.set(\"companyId\", companyId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"xLPnFhk1XtdFTWTL8mDBYxbg4y33\",\r\n    \"name\": \"Guszabma Co.\",\r\n    \"email\": \"guszabma@student.gu.se\",\r\n    \"logo\": \"url_to_guszabma_logo\",\r\n    \"locations\": [\r\n        \"Gothenburg\"\r\n    ],\r\n    \"jobs\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /jobs (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the response has a 201 status code\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Set the new job id as an environment variable\", function(){",
									"    const responseBody = pm.response.json();",
									"    const jobID = responseBody._id;",
									"    pm.environment.set(\"jobForApplication\", jobID);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Senior UX Designer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /applications collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"const responseJson = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"firstName\": \"Ann\",\n        \"lastName\": \"Smith\",\n        \"email\": \"ann.smith@gmail.com\",\n        \"linkedIn\": \"https://www.linkedin.com/in/annsmith\",\n        \"motivation\": \"I am dedicated to delivering high-quality results and thrive in a collaborative work environment.\",\n        \"jobId\": \"{{jobForApplication}}\"\n    },\n    {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@gmail.com\",\n        \"linkedIn\": \"https://www.linkedin.com/in/johndoe\",\n        \"motivation\": \"I am passionate about making a positive impact through innovative technologies and would love the opportunity to contribute to your team.\",\n        \"jobId\": \"{{jobForApplication}}\"\n    },\n    {\n        \"firstName\": \"Alice\",\n        \"lastName\": \"Johnson\",\n        \"email\": \"alice.johnson@gmail.com\",\n        \"linkedIn\": \"https://www.linkedin.com/in/alicejohnson\",\n        \"motivation\": \"I have a strong background in software development and am excited about the challenges your company is tackling.\",\n        \"jobId\": \"{{jobForApplication}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response contains the resource ID\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"_id\");",
									"    pm.environment.set(\"newResourceId\", responseBody._id);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"const responseJson = pm.response.json();",
									"const applicationId = responseJson._id;",
									"pm.environment.set(\"applicationId\", applicationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Williams\",\n    \"email\": \"bob.williams@gmail.com\",\n    \"linkedIn\": \"https://www.linkedin.com/in/bobwilliams\",\n    \"motivation\": \"I am enthusiastic about data analysis and eager to apply my skills to drive data-driven decisions within your organization.\",\n    \"jobId\": \"{{jobForApplication}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check Content-Type header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /applications/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check Content-Type header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/applications/{{applicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /applications/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.eql(\"Jack\");",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"jack.williams@gmail.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Jack\",\n    \"lastName\": \"Williams\",\n    \"email\": \"jack.williams@gmail.com\",\n    \"linkedIn\": \"https://www.linkedin.com/in/jackwilliams\",\n    \"motivation\": \"I am enthusiastic about data analysis.\",\n    \"jobId\": \"{{jobForApplication}}\",\n    \"status\": \"Rejected\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/applications/{{applicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /applications/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.linkedIn).to.eql(\"linkChanged\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"linkedIn\": \"linkChanged\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/applications/{{applicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "sort applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const sortingOrder = pm.request.url.query.get('order');",
									"const sortParameter = pm.request.url.query.get('sort');",
									"",
									"pm.test(\"Sorting test\", function () {",
									"    const responseJson = pm.response.json();",
									"    for (let i = 0; i < responseJson.length - 1; i++) {",
									"      const currentValue = responseJson[i][sortParameter];",
									"      const nextValue = responseJson[i + 1][sortParameter];",
									"        if (sortingOrder === \"asc\") {",
									"            pm.expect(new Date(currentValue)).to.be.at.most(new Date(nextValue));",
									"        } else {",
									"            pm.expect(new Date(currentValue)).to.be.at.least(new Date(nextValue));",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/applications?sort=dateOfApplication&order=desc",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							],
							"query": [
								{
									"key": "sort",
									"value": "dateOfApplication"
								},
								{
									"key": "order",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const desiredCategory = pm.request.url.query.get('status');",
									"pm.test(\"Filtering by category\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(function (item) {",
									"        pm.expect(item.status).to.eql(desiredCategory);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/applications?status=Rejected",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							],
							"query": [
								{
									"key": "status",
									"value": "Rejected"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /applications/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/applications/{{applicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "jobs",
			"item": [
				{
					"name": "POST/collection of jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the response has a 201 status code\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Set the new job id as an environment variable\", function(){",
									"    const responseBody = pm.response.json();",
									"    const jobID = responseBody[0]._id;",
									"    pm.environment.set(\"newJobId\", jobID);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"title\": \"Trainee UX Designer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}, {\n    \"title\": \"Junior NodeJS Developer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}, {\n    \"title\": \"Middle Java Developer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}, \n{\n    \"title\": \"Senior System Architect\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the response has a 201 status code\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Set the new job id as an environment variable\", function(){",
									"    const responseBody = pm.response.json();",
									"    const jobID = responseBody._id;",
									"    pm.environment.set(\"newJobId\", jobID);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Senior UX Designer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/jobs/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH/jobs/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.companyId).to.eql(pm.variables.get(\"companyId\"));",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"job_status\": \"Closed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/jobs/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Professor of Software Architecture\");",
									"    pm.expect(jsonData.validation).to.eql(true);",
									"    pm.expect(jsonData.deadline).to.eql(\"2023-10-10T00:00:00.000Z\");",
									"});",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Professor of Software Architecture\",\n    \"validation\": true,\n    \"deadline\": \"2023-10-10\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/jobs/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "companyJobs",
			"item": [
				{
					"name": "POST /jobs (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the response has a 201 status code\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Set the new job id as an environment variable\", function(){",
									"    const responseBody = pm.response.json();",
									"    const jobID = responseBody._id;",
									"    pm.environment.set(\"newJobId\", jobID);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Senior UX Designer\",\n    \"company_name\": \"Google\",\n    \"description\": \"At Google, employees are at the forefront of pioneering technological innovations, collaborating with some of the brightest minds in the industry to develop cutting-edge software\",\n    \"company_image\": \"IMAGE\",\n    \"skills\": [\"JavaScript\", \"Node\", \"AWS\"],\n    \"validation\": true,\n    \"yearly_salary_min\": 100000,\n    \"yearly_salary_max\": 120000,\n    \"location\": \"Dhaka, Bangladesh\",\n    \"date_posted\": \"2023-10-10\",\n    \"deadline\": \"2023-11-10\",\n    \"job_level\": \"Entry Level\",\n    \"education_level\": \"Bachelors\",\n    \"job_status\": \"In demand\",\n    \"job_enrollment_status\": \"Full-Time\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /companies/:id (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data assertion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.jobs).to.eql([pm.variables.get(\"newJobId\")]);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"jobs\": [\"{{newJobId}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /companies/:id/jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}/jobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /companies/:id/jobs/:jobId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code or 404 that means not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "jobApplications",
			"item": [
				{
					"name": "POST job application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"const jobApplicationId = pm.response.json()._id;",
									"pm.environment.set(\"jobApplicationId\", jobApplicationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Williams\",\n    \"email\": \"bob.williams@gmail.com\",\n    \"linkedIn\": \"https://www.linkedin.com/in/bobwilliams\",\n    \"motivation\": \"I am enthusiastic about data analysis and eager to apply my skills to drive data-driven decisions within your organization.\",\n    \"jobId\": \"{{newJobId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/jobs/:id (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"applications\":[\"{{jobApplicationId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all job applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code or 404 that means not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}/applications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET one job application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify GET request for all jobs returns a 200 status code or 404 that means not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}/applications/{{jobApplicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}",
								"applications",
								"{{jobApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE job application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{candidateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}/applications/{{jobApplicationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}",
								"applications",
								"{{jobApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/jobs/:id (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/jobs/{{newJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{{newJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/companies/:id (for others)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{companyToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/companies/{{companyId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"companies",
								"{{companyId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}